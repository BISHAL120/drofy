generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  EDITOR
  RESELLER
  USER
}

enum ResellerLevel {
  BEGINNER
  BRONZE
  SILVER
  GOLD
  ELITE
  LEGENDARY
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  phone         String        @unique
  password      String
  balance       Float         @default(0)
  email         String?
  address       String?
  profileImage  String?
  role          Role[]        @default([USER])
  verified      Boolean       @default(false)
  isActive      Boolean       @default(false)
  status        UserStatus    @default(INACTIVE)
  wallet        Float         @default(0)
  saleCount     Int?          @default(0)
  totalSales    Float?        @default(0)
  companyName   String?
  resellerLevel ResellerLevel @default(BEGINNER)
  referralCode  Float         @unique
  referredBy    String? // referralCode of inviter
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  orders        Order[]
  tickets       SupportTicket[]
  withdrawals   WithdrawalRequest[]
  walletHistory WalletTransaction[]
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  DRAFT
}

model Product {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  shortDescription String?
  fullDescription  String
  brand            String?
  sku              String
  isFeatured       Boolean
  status           ProductStatus @default(ACTIVE)
  cost             Float
  sellingPrice     Float
  discountPrice    Float?
  stock            Int
  trackInventory   Boolean       @default(false)
  stockAlert       Int?          @default(5)
  imageUrl         String
  videoUrl         String?
  saleCount        Int?          @default(0)
  deliveryCharge   Int
  weight           Float
  dimensions       String?
  metaTitle        String?
  metaDescription  String?
  inStock          Boolean       @default(true)
  isDeleted        Boolean       @default(false)
  category         Category      @relation(fields: [categoryId], references: [id])
  categoryId       String        @db.ObjectId
  SubCategory      SubCategory   @relation(fields: [subCategoryId], references: [id])
  subCategoryId    String        @db.ObjectId
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  Order Order[]
}

model SubCategory {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  slug            String    @unique
  isFeatured      Boolean
  isActive        Boolean   @default(true)
  sortOrder       Int?
  imageUrl        String?
  description     String?
  metaTitle       String?
  metaDescription String?
  productCount    Int       @default(0)
  products        Product[]
  Category        Category  @relation(fields: [categoryId], references: [id])
  categoryId      String    @db.ObjectId
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Category {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  slug            String        @unique
  isFeatured      Boolean
  isActive        Boolean       @default(true)
  sortOrder       Int?
  imageUrl        String?
  description     String?
  metaTitle       String?
  metaDescription String?
  productCount    Int           @default(0)
  Product         Product[]
  subCategory     SubCategory[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Order {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  reseller   User    @relation(fields: [resellerId], references: [id])
  resellerId String  @db.ObjectId
  product    Product @relation(fields: [productId], references: [id])
  productId  String  @db.ObjectId
  variantId  String? // optional for variant

  customerName    String
  customerPhone   String
  customerAddress String
  paymentMethod   PaymentMethod

  originalPrice  Float
  resellPrice    Float
  deliveryCharge Float
  advancePaid    Float
  cod            Boolean
  status         OrderStatus @default(PENDING)

  profit      Float // calculated on complete
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model WithdrawalRequest {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  reseller    User             @relation(fields: [resellerId], references: [id])
  resellerId  String           @db.ObjectId
  amount      Float
  status      WithdrawalStatus @default(PENDING)
  processedAt DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model WalletTransaction {
  id          String                @id @default(auto()) @map("_id") @db.ObjectId
  user        User                  @relation(fields: [userId], references: [id])
  userId      String                @db.ObjectId
  amount      Float
  type        WalletTransactionType
  reference   String? // optional order/withdrawal ID
  description String?
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
}

model SupportTicket {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  user      User         @relation(fields: [userId], references: [id])
  userId    String       @db.ObjectId
  subject   String
  message   String
  status    TicketStatus @default(OPEN)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model AdminActivityLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  adminId   String
  action    String
  metadata  Json
  createdAt DateTime @default(now())
}

model ReferralCommission {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String
  referredUser String
  orderId      String?
  commission   Float
  createdAt    DateTime @default(now())
}

model PlatformSetting {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  key       String   @unique
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Enums Start

enum OrderStatus {
  PENDING
  PROCESSING
  DELIVERED
  COMPLETED
  CANCELLED
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  CLOSED
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PaymentMethod {
  COD
  PREPAID
}

enum WalletTransactionType {
  CREDIT
  DEBIT
}
