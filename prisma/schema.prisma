generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  EDITOR
  RESELLER
  USER
}

enum ResellerLevel {
  BEGINNER
  BRONZE
  SILVER
  GOLD
  ELITE
  LEGENDARY
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  phone         String        @unique
  password      String
  email         String        @unique
  district      String?
  address       String?
  profileImage  String?
  role          Role[]        @default([USER])
  verified      Boolean       @default(false)
  isActive      Boolean       @default(false)
  status        UserStatus    @default(INACTIVE)
  wallet        Float         @default(0)
  orderCount    Int           @default(0)
  totalRevenue  Float         @default(0)
  companyName   String?
  resellerLevel ResellerLevel @default(BEGINNER)
  referralCode  Int           @unique
  referredBy    Int // referralCode of inviter
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  orders        Order[]
  tickets       SupportTicket[]
  withdrawals   WithdrawalRequest[]
  walletHistory WalletTransaction[]
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  DRAFT
}

type VideoType {
  videoUrl String
}

enum VariantType {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}

type ImageObj {
  imageUrl String
  imageID  String
}

type VarientObj {
  variantType VariantType
  stock       Int
}

model Product {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  shortDescription String?
  fullDescription  String
  brand            String?
  sku              String
  note             String?
  isFeatured       Boolean
  status           ProductStatus @default(ACTIVE)
  cost             Float
  sellingPrice     Float
  discountPrice    Float?
  stock            Int
  trackInventory   Boolean       @default(false)
  stockAlert       Int?          @default(5)
  images           ImageObj[]
  videoUrl         VideoType[]
  saleCount        Int?          @default(0)
  deliveryCharge   Int
  weight           Float
  variant          VarientObj[]
  dimensions       String?
  metaTitle        String?
  metaDescription  String?
  ratings          String?
  inStock          Boolean       @default(true)
  isDeleted        Boolean       @default(false)
  isVerified       Boolean       @default(false)
  category         Category      @relation(fields: [categoryId], references: [id])
  categoryId       String        @db.ObjectId
  SubCategory      SubCategory   @relation(fields: [subCategoryId], references: [id])
  subCategoryId    String        @db.ObjectId
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  CartItem CartItem[]
}

model SubCategory {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  slug            String    @unique
  isFeatured      Boolean
  isActive        Boolean   @default(true)
  sortOrder       Int?
  imageUrl        String?
  description     String?
  metaTitle       String?
  metaDescription String?
  productCount    Int       @default(0)
  products        Product[]
  Category        Category  @relation(fields: [categoryId], references: [id])
  categoryId      String    @db.ObjectId
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Category {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  slug            String        @unique
  isFeatured      Boolean
  isActive        Boolean       @default(true)
  sortOrder       Int?
  imageUrl        String?
  description     String?
  metaTitle       String?
  metaDescription String?
  productCount    Int           @default(0)
  Product         Product[]
  subCategory     SubCategory[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

enum OrderStatus {
  PENDING
  PROCESSING
  DELIVERED
  COMPLETED
  CANCELLED
}

enum DeliveryChargeStatus {
  PREPAID
  COD
}

model CartItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId
  Order     Order?  @relation(fields: [orderId], references: [id])
  orderId   String? @db.ObjectId

  productName        String
  productPrice       String
  sellingPrice       String
  profit             String
  productImage       String
  productQuantity    String
  productSize        String
  productSubcategory String
}

model Order {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  reseller   User   @relation(fields: [resellerId], references: [id])
  resellerId String @db.ObjectId

  orderNumber      Int                  @unique
  customerPhone    String
  customerName     String
  customerDistrict String
  customerUpazila  String
  customerAddress  String
  deliveryCharge   String
  advanceCharge    Boolean
  totalPrice       String
  comments         String
  note             String?
  cartItems        CartItem[]
  status           OrderStatus          @default(PENDING)
  chargeStatus     DeliveryChargeStatus
  totalProfit      Float? // calculated on complete

  consignment_id Int?
  tracking_code  String?

  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model steadFastDeliveryStatus {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  notification_type String
  consignment_id    Int
  invoice           String
  cod_amount        Float?
  status            String?
  delivery_charge   Float?
  tracking_message  String
  updated_at        String

  createdAt DateTime @default(now())
}

enum WalletTransactionType {
  BKASH
  MANUAL
  AUTOMATION
}

model WalletTransaction {
  id            String                @id @default(auto()) @map("_id") @db.ObjectId
  user          User                  @relation(fields: [userId], references: [id])
  userId        String                @db.ObjectId
  amount        Float
  walletBalance Float
  details       String
  type          WalletTransactionType
  reference     String? // optional order/withdrawal ID
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  REJECTED
}

model WithdrawalRequest {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  requestId     String           @unique
  method        String
  amount        Float
  number        String
  processedDate String?
  note          String?
  status        WithdrawalStatus @default(PENDING)
  reseller      User             @relation(fields: [resellerId], references: [id])
  resellerId    String           @db.ObjectId
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  CLOSED
}

model SupportTicket {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  user      User         @relation(fields: [userId], references: [id])
  userId    String       @db.ObjectId
  subject   String
  message   String
  status    TicketStatus @default(OPEN)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Verification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  email     String
  code      Int
  expiresAt DateTime
  createdAt DateTime @default(now())
}
